pipeline {
    agent any
    options {
        timestamps ()
        //copyArtifactPermission('criticaltestchild');
        skipDefaultCheckout(true)
    }
    stages {
        stage('Cleanup') {
            steps {
                // Clean before build
                cleanWs()
                echo "branch name: ${env.JOB_NAME}"
            }
        }   
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [[$class: 'CloneOption', timeout: 600]], userRemoteConfigs: [[credentialsId: 'test-results-aggregator', url: 'https://github.com/zubairRiyaz/java.git']])
            }
        }
        stage ('Build') {
            steps {
                sh '''
                    echo $(date) > results.txt

                '''
            }
        }
        stage ('Test') {
            steps {
                sh 'echo hello Test stage'
            }
        }
        stage('archive and aggregate') {
            steps {
                
                script {
                  //script {
                        
                    //def jobsList = ['downstreamtest1', 'downstreamtest2']
                                
                                
                    //println(jobsList.get(0))
                    
                    //parallel jobsList.collectEntries {value ->
                        //["Building With ${value}": {
                           // Jenkins.instance.getItem(value).isBuildable()
                           // build job : value,
                           // wait: true, propagate: false
                        //}]
                    //}
                    build job : "criticaltestchild", wait: true, propagate: false
                    testResultsAggregator jobs:[[jobName: 'criticaltestchild']] 
                    
                    //catch (err) {
                        //echo err.getMessage()
                    //}    
                }               
                      
                     
            } 
        }
    }
    post {
        always {
            archiveArtifacts(artifacts: 'results.txt', allowEmptyArchive: true, fingerprint: true)
            junit(testResults: 'results.xml', allowEmptyResults: true)
        }
    }
}
